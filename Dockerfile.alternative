# 备用 Dockerfile - 使用不同的构建策略
FROM node:22-alpine AS base

# 安装必要的系统依赖
RUN apk add --no-cache libc6-compat curl

# 设置工作目录
WORKDIR /app

# 配置 npm
RUN npm config set registry https://registry.npmmirror.com/ && \
    npm config set fetch-retry-mintimeout 20000 && \
    npm config set fetch-retry-maxtimeout 120000 && \
    npm config set fetch-retries 5 && \
    npm config set fetch-timeout 600000

# 复制 package 文件
COPY package*.json ./
COPY .npmrc ./

# 清理 npm 缓存并安装依赖
RUN npm cache clean --force && \
    npm install --verbose --no-audit --no-fund

# 复制源代码
COPY . .

# 设置环境变量
ENV NEXT_TELEMETRY_DISABLED=1
ENV NODE_ENV=production

# 构建应用
RUN npm run build

# 生产阶段
FROM node:22-alpine AS runner
WORKDIR /app

ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

# 创建用户
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# 复制必要文件
COPY --from=base /app/public ./public
COPY --from=base --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=base --chown=nextjs:nodejs /app/.next/static ./.next/static

# 复制数据库脚本
COPY --from=base --chown=nextjs:nodejs /app/scripts ./scripts
COPY --from=base --chown=nextjs:nodejs /app/db ./db
COPY --from=base /app/docker-entrypoint.sh ./docker-entrypoint.sh

# 设置权限
USER root
RUN chmod +x ./docker-entrypoint.sh
USER nextjs

# 暴露端口
EXPOSE 3000

ENV PORT=3000
ENV HOSTNAME="0.0.0.0"

# 启动应用
ENTRYPOINT ["./docker-entrypoint.sh"]
CMD ["node", "server.js"]
