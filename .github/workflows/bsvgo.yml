name: Deploy to Ubuntu Server with Docker

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to Server
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "Starting deployment..."

            # 进入项目目录
            cd /home/${{ secrets.SERVER_USER }}/bsvgo || {
              echo "Project directory not found, creating..."
              mkdir -p /home/${{ secrets.SERVER_USER }}/bsvgo
              cd /home/${{ secrets.SERVER_USER }}/bsvgo
            }

            # 拉取最新代码
            if [ -d ".git" ]; then
              echo "Pulling latest code..."
              git stash || true
              git pull origin main
            else
              echo "Cloning repository..."
              git clone https://github.com/${{ github.repository }}.git .
            fi

            # 登录到 GitHub Container Registry
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # 拉取最新镜像
            echo "Pulling latest Docker image..."
            # image-tag 可能会是类似 "ghcr.io/tye-js/bsvgo:main,ghcr.io/tye-js/bsvgo:latest,ghcr.io/tye-js/bsvgo:main-26759ee"
            DEPLOY_IMAGE_TAG=$(echo "${{ needs.build-and-push.outputs.image-tag }}" | head -n 1)

            echo "Pulling latest Docker image: ${DEPLOY_IMAGE_TAG}"
            docker pull "${DEPLOY_IMAGE_TAG}"

            # 确保 docker-compose.yml 配置正确
            echo "Fixing docker-compose.yml configuration..."

            # 确保 PostgreSQL 使用正确的镜像
            sed -i '/postgres:/,/container_name: bsvgo-postgres/ s|image: ghcr.io/tye-js/bsvgo:.*|image: postgres:16-alpine|g' docker-compose.yml || true

            # 更新应用服务的镜像标签
            sed -i '/app:/,/container_name: bsvgo-app/ s|image: ghcr.io/tye-js/bsvgo:.*|image: '"${DEPLOY_IMAGE_TAG}"'|g' docker-compose.yml || true

            # 停止现有服务
            echo "Stopping existing services..."
            docker-compose down || true

            # 清理未使用的镜像
            docker image prune -f || true

            # 分步启动服务
            echo "Starting PostgreSQL..."
            docker-compose up -d postgres

            # 等待数据库启动
            echo "Waiting for PostgreSQL..."
            for i in {1..30}; do
                if docker-compose exec -T postgres pg_isready -U bsvgo -d bsvgo_db > /dev/null 2>&1; then
                    echo "PostgreSQL is ready"
                    break
                fi
                echo -n "."
                sleep 2
            done

            # 确保数据库存在
            docker-compose exec -T postgres psql -U bsvgo -c "CREATE DATABASE bsvgo_db;" 2>/dev/null || echo "Database exists"

            # 启动应用
            echo "Starting application..."
            docker-compose up -d app

            # 等待应用启动
            echo "Waiting for application..."
            for i in {1..60}; do
                if curl -f http://localhost:3000/api/health > /dev/null 2>&1; then
                    echo "Application is ready"
                    break
                fi
                echo -n "."
                sleep 2
            done

            # 启动 Nginx
            echo "Starting Nginx..."
            docker-compose up -d nginx

            # 最终检查
            echo "Final service check..."
            docker-compose ps

            # 检查应用健康状态
            echo "Checking application health..."
            if curl -f http://localhost:3000/api/health > /dev/null 2>&1; then
                echo "✅ Application health check passed"
            else
                echo "❌ Application health check failed"
                docker-compose logs app
            fi

            # 检查 Nginx 访问
            if curl -I http://localhost > /dev/null 2>&1; then
                echo "✅ Nginx access successful"
                echo "🎉 Deployment completed successfully!"
            else
                echo "❌ Nginx access failed"
                docker-compose logs nginx
            fi
