
services:
  # PostgreSQL 数据库
  postgres:
    image: postgres:16-alpine
    container_name: bsvgo-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-bsvgo_db}
      POSTGRES_USER: ${POSTGRES_USER:-bsvgo}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-your_secure_password_here}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - bsvgo-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-bsvgo} -d ${POSTGRES_DB:-bsvgo_db}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Next.js 应用
  app:
    build:
      context: .
      dockerfile: Dockerfile
    command: ["node", "server.js"]
    container_name: bsvgo-app
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: ${DATABASE_URL}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET:-your_nextauth_secret_here}
      NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost:3000}
      NEXT_PUBLIC_APP_URL: ${NEXT_PUBLIC_APP_URL:-http://localhost:3000}
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - bsvgo-network
    volumes:
      - app_uploads:/app/public/uploads
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Nginx 反向代理 (可选)
  nginx:
    image: nginx:alpine
    container_name: bsvgo-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - app_uploads:/var/www/uploads:ro
    depends_on:
      app:
        condition: service_healthy
    networks:
      - bsvgo-network

volumes:
  postgres_data:
    driver: local
  app_uploads:
    driver: local

networks:
  bsvgo-network:
    driver: bridge
